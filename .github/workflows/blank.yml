# This workflow contains two jobs: one for building Docker images in parallel, and one for CDK synth and deploy.

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker image tag to use for build and push'
        required: false
        default: 'latest'

jobs:
  check-access:
    - name : Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with :
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity

  build-rest-docker:
    name: Build rest-docker
    runs-on: ubuntu-latest
    env:
      DOCKER_TAG: ${{ github.event.inputs.docker_tag || 'latest' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build rest-docker
        run: bash scripts/build_docker.sh rest-docker "$DOCKER_TAG"

  build-queue-docker:
    name: Build queue-docker
    runs-on: ubuntu-latest
    env:
      DOCKER_TAG: ${{ github.event.inputs.docker_tag || 'latest' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build queue-docker
        run: bash scripts/build_docker.sh queue-docker "$DOCKER_TAG"

  cdk-deploy:
    name: CDK Synth and Deploy
    runs-on: ubuntu-latest
    needs: [build-rest-docker, build-queue-docker]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install CDK dependencies
        run: |
          cd cdk-app
          pip install poetry
          poetry install
      - name: CDK Synth
        run: |
          cd cdk-app
          poetry run python scripts/build_cdk.py
      - name: Set Docker tags and deploy CDK
        env:
          REST_DOCKER_TAG: ${{ github.sha }}
          LAMBDA_DOCKER_TAG: ${{ github.run_number }}
        run: |
          cd cdk-app
          poetry run cdk deploy
      
